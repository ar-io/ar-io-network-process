local PriorityDeque = require("src.queue")

describe("PriorityDeque", function()
	local deque
	local function comparator(a, b)
		return a - b -- Prioritize lower numbers
	end

	before_each(function()
		deque = PriorityDeque:new(comparator)
	end)

	it("should initialize empty", function()
		assert.equals(0, deque:getSize())
	end)

	describe("enqueueHead", function()
		it("should add elements in priority order", function()
			deque:enqueueHead(10)
			deque:enqueueHead(5)
			deque:enqueueHead(15)
			assert.equals(5, deque:peekHead())
			assert.equals(15, deque:peekTail())
			assert.equals(3, deque:getSize())
		end)
	end)

	describe("enqueueTail", function()
		it("should add elements in priority order", function()
			deque:enqueueTail(10)
			deque:enqueueTail(5)
			deque:enqueueTail(15)
			assert.equals(5, deque:peekHead())
			assert.equals(15, deque:peekTail())
			assert.equals(3, deque:getSize())
		end)
	end)

	describe("dequeueHead", function()
		it("should remove and return the head element", function()
			deque:enqueueHead(10)
			deque:enqueueHead(5)
			deque:enqueueHead(15)
			assert.equals(5, deque:dequeueHead())
			assert.equals(10, deque:dequeueHead())
			assert.equals(15, deque:dequeueHead())
			assert.equals(0, deque:getSize())
		end)

		it("should raise an error when dequeuing from an empty deque", function()
			assert.has_error(function()
				deque:dequeueHead()
			end, "Deque is empty")
		end)
	end)

	describe("dequeueTail", function()
		it("should remove and return the tail element", function()
			deque:enqueueHead(10)
			deque:enqueueHead(5)
			deque:enqueueHead(15)
			assert.equals(15, deque:dequeueTail())
			assert.equals(10, deque:dequeueTail())
			assert.equals(5, deque:dequeueTail())
			assert.equals(0, deque:getSize())
		end)

		it("should raise an error when dequeuing from an empty deque", function()
			assert.has_error(function()
				deque:dequeueTail()
			end, "Deque is empty")
		end)
	end)

	describe("peekHead and peekTail", function()
		it("should return the head and tail elements without removing them", function()
			deque:enqueueHead(10)
			deque:enqueueHead(5)
			deque:enqueueHead(15)
			assert.equals(5, deque:peekHead())
			assert.equals(15, deque:peekTail())
			assert.equals(3, deque:getSize())
		end)

		it("should raise an error when peeking an empty deque", function()
			assert.has_error(function()
				deque:peekHead()
			end, "Deque is empty")
			assert.has_error(function()
				deque:peekTail()
			end, "Deque is empty")
		end)
	end)
end)
